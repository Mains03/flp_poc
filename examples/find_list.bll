add :: Nat -> Nat -> Nat
add n m = case m of
              0 -> n
            | S z -> S (add n z).
            
sum :: [Nat] -> Nat
sum xs = case xs of 
              [] -> 0
            | (z:zs) -> add z (sum zs).
            
length :: [Nat] -> Nat
length xs = case xs of
              [] -> 0
            | (z:zs) -> S (length zs).
            
exists xs :: [Nat]. length xs =:= 7. sum xs =:= 5. xs.