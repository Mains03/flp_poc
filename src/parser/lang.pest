program = _{ SOI ~ decl* ~ EOI }

decl = { func_type | func | stm ~ "." }

func_type = { ident ~ "::" ~ type }
type = { primary_type ~ ("->" ~ type)* }
primary_type = { ident | list_type | "(" ~ type ~ ")" }
list_type = { "[" ~ primary_type ~ "]"}

func = { ident ~ arg* ~ "=" ~ stm ~ "." }
arg = { ident }

stm = { if_stm | let_stm | exists_stm | equate_stm | choice_stm | expr }

if_stm = { "if" ~ stm ~ "then" ~ stm ~ "else" ~ stm }
let_stm = { "let" ~ ident ~ "=" ~ stm ~ "in" ~ stm }
exists_stm = { "exists" ~ ident ~ "::" ~ type ~ "." ~ stm }
equate_stm = { expr ~ "=:=" ~ expr ~ "." ~ stm }
choice_stm = { expr ~ ("<>" ~ expr)+ }

expr = { add | app | bexpr | list | primary_expr }
add = { primary_expr ~ "+" ~ (add | primary_expr) }
app = { primary_expr ~ primary_expr+ }
bexpr = { primary_expr ~ bexpr_op ~ primary_expr | "!" ~ primary_expr }
list = { "[" ~ (primary_expr ~ ("," ~ primary_expr)*)? ~ "]" }
primary_expr = { ident | nat | bool | "(" ~ stm ~ ")" }

bexpr_op = { "==" | "!=" }

ident = @{ !keywords ~ (ASCII_ALPHA | "_") ~ (ASCII_ALPHANUMERIC | "_")* }
keywords = { "if" | "then" | "else" | "let" | "in" | "exists" | bool }
nat = @{ ASCII_DIGIT+ }
bool = { "true" | "false" }

WHITESPACE = _{ WHITE_SPACE }