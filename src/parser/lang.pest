program = _{ SOI ~ declaration* ~ EOI }

declaration = { function_type | function | statement ~ "." }

function_type = { identifier ~ "::" ~ type }

type = { arrow_type | product_type | primary_type }
arrow_type = { primary_type ~ "->" ~ type }
product_type = { primary_type ~ "*" ~ type }

primary_type = { identifier | list_type | "(" ~ type ~ ")" }
list_type = { "[" ~ type ~ "]"}

function = { identifier ~ argument* ~ "=" ~ statement ~ "." }
argument = { identifier | argument_pair }
argument_pair = { "(" ~ argument ~ "," ~ argument ~ ")" }

// The underscores are necessary since otherwise the word name conflicts with
// rust reserved words
statement = { _if | _let | exists | equate | choice | case | expression }

_if = { "if" ~ statement ~ "then" ~ statement ~ "else" ~ statement }
_let = { "let" ~ identifier ~ "=" ~ statement ~ "in" ~ statement }
exists = { "exists" ~ identifier ~ "::" ~ type ~ "." ~ statement }
equate = { expression ~ "=:=" ~ expression ~ "." ~ statement }
choice = { expression ~ ("<>" ~ expression)+ }
case = { "case" ~ expression ~ "of" ~ cases }
cases = { expression ~ "->" ~ expression ~ ("|" ~ expression ~ "->" ~ expression)*}

expression = { cons | succ | application | boolean_expr | lambda | primary_expr }
cons = { primary_expr ~ ":" ~ expression }
succ = { "S" ~ expression }
application = { primary_expr ~ primary_expr+ }
boolean_expr = { primary_expr ~ bexpr_op ~ primary_expr | "!" ~ primary_expr }
lambda = { "\\" ~ argument ~ "." ~ statement }

primary_expr = { nat_zero | list_nil | identifier | number | boolean | pair | list | "(" ~ statement ~ ")" }
nat_zero = { "Z" }
list_nil = { "[" ~ "]" }
pair = { "(" ~ primary_expr ~ "," ~ primary_expr ~ ")" }
list = { "[" ~ (primary_expr ~ ("," ~ primary_expr)*)+ ~ "]" }

bexpr_op = { "==" | "!=" | "&&" | "||" }

identifier = @{ keywords? ~ (ASCII_ALPHA | "_") ~ (ASCII_ALPHANUMERIC | "_")* }
keywords = { "if" | "then" | "else" | "let" | "in" | "exists" | "case" | "of" | boolean }
number = @{ ASCII_DIGIT+ }
boolean = { "true" | "false" }

WHITESPACE = _{ WHITE_SPACE }