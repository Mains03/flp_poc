program = _{ SOI ~ decl* ~ EOI }

decl = { func_type | func | stm ~ "." }

func_type = { ident ~ "::" ~ type }
type = { primary_type ~ ("->" ~ type)* }
primary_type = { ident | "(" ~ type ~ ")" }

func = { ident ~ arg* ~ "=" ~ stm ~ "." }
arg = { ident } // currently just identifiers, potentially allow patterns in future

stm = { if_stm | let_stm | exists_stm | equate_stm | choice_stm | expr }

if_stm = { "if" ~ stm ~ "then" ~ stm ~ "else" ~ stm }
let_stm = { "let" ~ ident ~ "=" ~ stm ~ "in" ~ stm }
exists_stm = { "exists" ~ ident ~ "::" ~ type ~ "." ~ stm }
equate_stm = { expr ~ "=:=" ~ expr ~ "." ~ stm }
choice_stm = { expr ~ ("<>" ~ expr)+ }

expr = { add | app | primary_expr }
add = { primary_expr ~ "+" ~ (add | primary_expr) }
app = { primary_expr ~ primary_expr+ }
primary_expr = { ident | nat | "(" ~ stm ~ ")" }

ident = @{ !keywords ~ (ASCII_ALPHA | "_") ~ (ASCII_ALPHANUMERIC | "_")* }
keywords = { "if" | "then" | "else" | "let" | "in" | "exists" | "main" }
nat = @{ ASCII_DIGIT+ }

WHITESPACE = _{ WHITE_SPACE }